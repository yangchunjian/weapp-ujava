
<view class="top-tab flex-wrp flex-tab " >
  <view class="toptab flex-item {{currentNavtab==idx ? 'active' : ''}}" wx:for="{{navTab}}" wx:for-index="idx" wx:for-item="itemName" data-idx="{{idx}}" bindtap="switchTab">
    {{itemName}}
  </view>
</view>

<scroll-view scroll-y="true" class="container discovery withtab" bindscrolltoupper="upper" bindscrolltolower="lower"  scroll-into-view="{{toView}}" scroll-top="{{scrollTop}}">
  <view class="ctnt0" hidden="{{currentNavtab==0 ? '' : true}}">
    <swiper class="activity" indicator-dots="{{indicatorDots}}"
            autoplay="{{autoplay}}" interval="{{interval}}" duration="{{duration}}">
      <block wx:for="{{imgUrls}}">
        <swiper-item>
          <image src="{{item}}" class="slide-image" width="355" height="155"/>
        </swiper-item>
      </block>
    </swiper>

    <text>
      UJava(架构设计)

      如果您没有架构经验，可先从设计模式开始~
    </text>
  </view>
  <view class="ctnt1" hidden="{{currentNavtab==1 ? '' : true}}">
        <text>
          第一梯队思想

          - 编程
          - 结构化
          - 关注点分离
          - 抽象
          - 封装
          - 复用
          - 分治
          - 组合
          - 缓存
          - 解耦
          - 编码
          - 协议
          - 容错
          - 自动化
          - 预处理
          - 时空权衡
          - 统筹规划

          第二梯队思想

          - 递归
          - 索引
          - 迭代
          - 遍历
          - 中断
          - 回滚
          - 模板
          - 模式
          - 代理

          第三梯队思想

          - 管道
          - 并发
          - 并行
          - 批量
          - 异步
          - 回调
          - 延迟
          - 定时
          - 通知
          - 阻塞

          第四梯队思想

          - 面向过程编程
          - 函数式编程
          - 面向对象编程
          - 面向过程与面向对象的区别


        </text>
  </view>
  <view class="ctnt2" hidden="{{currentNavtab==2 ? '' : true}}">
        <text>
          ## [设计模式的六大原则]

          - 单一职责原则（SRP）：一个类只应该有一个引起它变化的原因。
          - 开放封闭原则（OCP）：软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。`对扩展开放，对修改关闭`。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是`为了使程序的扩展性好，易于维护和升级`。想要达到这样的效果，我们需要使用接口和抽象类。
          - 里氏替换原则（LSP）：子类型必须能够替换掉它们的父类型。里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，`任何基类可以出现的地方，子类一定可以出现`。LSP 是继承复用的基石，`只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为`。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。
          - 依赖倒置原则（DIP）：高层模块不应该依赖于低层模块，两者都应该依赖于抽象接口；抽象接口不应该依赖于具体实现，具体实现应该依赖于抽象接口。是开闭原则的基础，具体内容：`针对接口编程，依赖于抽象而不依赖于具体`。
          - 接口隔离原则（ISP）：不应该强迫一个类实现它不需要的接口，应该将接口拆分成更小和更具体的部分，以便客户端只需要知道它们感兴趣的部分。`使用多个隔离的接口，比使用单个接口要好`。它还有另外一个意思是：降低类之间的耦合度。便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。
          - 迪米特法则（LOD）：一个对象应该对其他对象有尽可能少的了解，通常称为“最少知识原则”。又称最少知道原则，`一个实体应当尽量少地与其他实体之间发生相互作用`，使得系统功能模块相对独立。
          - 合成复用原则（CRP）：尽量`使用合成/聚合的方式`，而不是使用继承。

          ### [一、创建型模式]

          这种模式`提供了一种在创建对象的同时隐藏创建逻辑的方式`，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。包括（工厂模式，抽象工厂模式，单例模式，建造者模式，原型模式）

          - 1、单例模式（Singleton Pattern）
          - 1）饿汉式
          - 2）懒汉式，双检锁
          - 3）静态内部类
          - 4）枚举
          - 2、原型模式（Prototype Pattern）
          - 3、工厂模式（Factory Pattern）
          - 4、抽象工厂模式（Abstract Factory Pattern）
          - 5、建造者模式（Builder Pattern）

          ### [二、结构型模式]

          这种模式`关注类和对象的组合`。继承的概念被用来组合接口和定义组合对象获得新功能的方式。包括（适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式）

          - 1、适配器模式（Adapter Pattern）
          - 2、组合模式（Composite Pattern）
          - 3、装饰器模式（Decorator Pattern）
          - 4、外观模式（Facade Pattern）
          - 5、享元模式（Flyweight Pattern）
          - 6、代理模式（Proxy Pattern）
          - 1）静态代理
          - 2）jdk动态代理
          - 3）cglib动态代理
          - 7、桥接模式（Bridge Pattern）

          ### [三、行为型模式]

          这些设计模式`特别关注对象之间的通信`。包括（策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式）

          - 1、责任链模式（Chain of Responsibility Pattern）
          - 2、命令模式（Command Pattern）
          - 3、解释器模式（Interpreter Pattern）
          - 4、迭代器模式（Iterator Pattern）
          - 5、观察者模式（Observer Pattern）
          - 6、状态模式（State Pattern）
          - 7、模板模式（Template Pattern）
          - 8、中介者模式（Mediator Pattern）
          - 9、备忘录模式（Memento Pattern）
          - 10、访问者模式（Visitor Pattern）
          - 11、策略模式（Strategy Pattern）

        </text>
  </view>
  <view class="ctnt3" hidden="{{currentNavtab==3 ? '' : true}}">
        <text>
          ## [📚简介]

          `UJava`是一个功能丰富且易用的**Java架构设计工具**，旨在帮助开发者快速、便捷地使用各类设计完成开发任务，以满足各类业务需求。

          ### [🎁UJava名称的由来]

          UJava = U + Java，是基于设计经验的开源库，“U”是You的表示，Java表示语言。UJava谐音“你的语言”，简洁易懂。

          ### [🍺UJava理念]

          `UJava`既是一个工具集，也是一个知识库，我们从不自诩代码原创，大多数工具类都是**搬运**而来，因此：

          - 你可以引入使用，也可以**拷贝**和修改使用，而**不必标注任何信息**，只是希望能把bug及时反馈回来。
          - 我们努力健全**中文**注释，为源码学习者提供良好地学习环境，争取做到人人都能看得懂。

          ---

          ## [🛠️包含组件]

          提供以下组件：

          |模块|介绍|
          |---|---|
          |ujava-common|通用组件|
          |ujava-design|设计模式|
          |ujava-script|脚本|
          |ujava-web|WEB组件|

          可以根据需求对每个模块单独引入，也可以通过引入`ujava-all`方式引入所有模块。

          ---

          ## [📝文档]

          [📘中文文档open in new window](https://www.ujava.cn/)

          [📙参考APIopen in new window](https://apidoc.gitee.com/yangchunjian/ujava/)

          ---

          ## [🪙支持UJava]

          ### [💳捐赠]

          如果你觉得UJava不错，可以捐赠请维护者吃包辣条~，在此表示感谢_。

          [Gitee上捐赠open in new window](https://gitee.com/yangchunjian/ujava)

          ---

          ## [📦安装]

          ### [🍊Maven]

          在项目的pom.xml的dependencies中加入以下内容:

          ```
          <dependency>
            <groupId>cn.ujava</groupId>
            <artifactId>ujava-all</artifactId>
            <version>7.0.0</version>
          </dependency>
          ```

          ### [🍐Gradle]

          ```
          implementation 'cn.ujava:ujava-all:7.0.0'
          ```

          ### [📥下载jar]

          点击以下链接，下载`ujava-all-X.X.X.jar`即可：

          - [Maven中央库open in new window](https://repo1.maven.org/maven2/cn/ujava/ujava-all/7.0.0/)

          > 🔔️注意
          > UJava 3.x支持JDK8+。

          ### [🚽编译安装]

          访问UJava的Gitee主页：[https://gitee.com/yangchunjian/ujavaopen in new window](https://gitee.com/yangchunjian/ujava) 下载整个项目源码（v7-main或v7-dev分支都可）然后进入UJava项目目录执行：

          ```
          ./ujava.sh --install
          ```

          然后就可以使用Maven引入了。

          ---

          ## [🏗️添砖加瓦]

          ### [🎋分支说明]

          UJava的源码分为两个分支，功能如下：

          |分支|作用|
          |---|---|
          |v7-main|主分支，release版本使用的分支，与中央库提交的jar一致，不接收任何pr或修改|
          |v7-dev|开发分支，默认为下个版本的SNAPSHOT版本，接受修改或pr|

          ### [🐞提供bug反馈或建议]

          提交问题反馈请说明正在使用的JDK版本呢、UJava版本和相关依赖库版本。

          - [Gitee issueopen in new window](https://gitee.com/yangchunjian/ujava/issues)
          - [Github issueopen in new window](https://github.com/yangchunjian/ujava/issues)

          ### [🧬贡献代码的步骤]

          1. 在Gitee或者Github上fork项目到自己的repo
          2. 把fork过去的项目也就是你的项目clone到你的本地
          3. 修改代码（记得一定要修改v7-dev分支）
          4. commit后push到自己的库（v7-dev分支）
          5. 登录Gitee或Github在你首页可以看到一个 pull request 按钮，点击它，填写一些说明信息，然后提交即可。
          6. 等待维护者合并

          ### [📐PR遵照的原则]

          UJava欢迎任何人为UJava添砖加瓦，贡献代码，不过维护者是一个强迫症患者，为了照顾病人，需要提交的pr（pull request）符合一些规范，规范如下：

          1. 注释完备，尤其每个新增的方法应按照Java文档规范标明方法说明、参数说明、返回值说明等信息，必要时请添加单元测试，如果愿意，也可以加上你的大名。
          2. 新加的方法不要使用第三方库的方法，UJava遵循无依赖原则（除非在extra模块中加方法工具）。
          3. 请pull request到`v7-dev`分支。UJava在7.x版本后使用了新的分支：`v7-main`是主分支，表示已经发布中央库的版本，这个分支不允许pr，也不允许修改。
          4. 我们如果关闭了你的issue或pr，请不要诧异，这是我们保持问题处理整洁的一种方式，你依旧可以继续讨论，当有讨论结果时我们会重新打开。


        </text>
  </view>
</scroll-view>
